{"ast":null,"code":"import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { residentListReducer, residentDetailsReducer, residentCreateReducer, residentDeleteReducer, residentUpdateReducer } from './reducers/residentReducers';\nimport { blotterListReducer, blotterDetailsReducer, blotterCreateReducer, blotterDeleteReducer, blotterUpdateReducer } from './reducers/blotterReducers';\nimport { imageDetailsReducer, imageListReducer, imageUpdateReducer } from './reducers/imageReducers';\nimport { userLoginReducer } from './reducers/userReducers';\nconst reducer = combineReducers({\n  residentList: residentListReducer,\n  residentDetails: residentDetailsReducer,\n  userLogin: userLoginReducer,\n  residentCreate: residentCreateReducer,\n  residentDelete: residentDeleteReducer,\n  residentUpdate: residentUpdateReducer,\n  imageList: imageListReducer,\n  imageDetails: imageDetailsReducer,\n  imageUpdate: imageUpdateReducer,\n  blotterList: blotterListReducer,\n  blotterDetails: blotterDetailsReducer,\n  blotterCreate: blotterCreateReducer,\n  blotterDelete: blotterDeleteReducer,\n  blotterUpdate: blotterUpdateReducer\n});\nconst userInfoFromStorage = localStorage.getItem('userInfo') ? JSON.parse(localStorage.getItem('userInfo')) : null;\nconst initialState = {\n  userLogin: {\n    userInfo: userInfoFromStorage\n  }\n};\nconst middleware = [thunk];\nconst store = createStore(reducer, initialState, composeWithDevTools(applyMiddleware(...middleware)));\nexport default store;","map":{"version":3,"sources":["C:/Users/Mat/Desktop/BarangayBMIS/frontend/src/store.js"],"names":["createStore","combineReducers","applyMiddleware","thunk","composeWithDevTools","residentListReducer","residentDetailsReducer","residentCreateReducer","residentDeleteReducer","residentUpdateReducer","blotterListReducer","blotterDetailsReducer","blotterCreateReducer","blotterDeleteReducer","blotterUpdateReducer","imageDetailsReducer","imageListReducer","imageUpdateReducer","userLoginReducer","reducer","residentList","residentDetails","userLogin","residentCreate","residentDelete","residentUpdate","imageList","imageDetails","imageUpdate","blotterList","blotterDetails","blotterCreate","blotterDelete","blotterUpdate","userInfoFromStorage","localStorage","getItem","JSON","parse","initialState","userInfo","middleware","store"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,eAAvC,QAA8D,OAA9D;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,SACEC,mBADF,EAEEC,sBAFF,EAGEC,qBAHF,EAIEC,qBAJF,EAKEC,qBALF,QAMO,6BANP;AAOA,SACEC,kBADF,EAEEC,qBAFF,EAGEC,oBAHF,EAIEC,oBAJF,EAKEC,oBALF,QAMO,4BANP;AAOA,SACEC,mBADF,EAEEC,gBAFF,EAGEC,kBAHF,QAIO,0BAJP;AAKA,SAASC,gBAAT,QAAiC,yBAAjC;AAEA,MAAMC,OAAO,GAAGlB,eAAe,CAAC;AAC9BmB,EAAAA,YAAY,EAAEf,mBADgB;AAE9BgB,EAAAA,eAAe,EAAEf,sBAFa;AAG9BgB,EAAAA,SAAS,EAAEJ,gBAHmB;AAI9BK,EAAAA,cAAc,EAAEhB,qBAJc;AAK9BiB,EAAAA,cAAc,EAAEhB,qBALc;AAM9BiB,EAAAA,cAAc,EAAEhB,qBANc;AAO9BiB,EAAAA,SAAS,EAAEV,gBAPmB;AAQ9BW,EAAAA,YAAY,EAAEZ,mBARgB;AAS9Ba,EAAAA,WAAW,EAAEX,kBATiB;AAU9BY,EAAAA,WAAW,EAAEnB,kBAViB;AAW9BoB,EAAAA,cAAc,EAAEnB,qBAXc;AAY9BoB,EAAAA,aAAa,EAAEnB,oBAZe;AAa9BoB,EAAAA,aAAa,EAAEnB,oBAbe;AAc9BoB,EAAAA,aAAa,EAAEnB;AAde,CAAD,CAA/B;AAiBA,MAAMoB,mBAAmB,GAAGC,YAAY,CAACC,OAAb,CAAqB,UAArB,IACxBC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAX,CADwB,GAExB,IAFJ;AAIA,MAAMG,YAAY,GAAG;AACnBjB,EAAAA,SAAS,EAAE;AAAEkB,IAAAA,QAAQ,EAAEN;AAAZ;AADQ,CAArB;AAIA,MAAMO,UAAU,GAAG,CAACtC,KAAD,CAAnB;AAEA,MAAMuC,KAAK,GAAG1C,WAAW,CACvBmB,OADuB,EAEvBoB,YAFuB,EAGvBnC,mBAAmB,CAACF,eAAe,CAAC,GAAGuC,UAAJ,CAAhB,CAHI,CAAzB;AAKA,eAAeC,KAAf","sourcesContent":["import { createStore, combineReducers, applyMiddleware } from 'redux'\nimport thunk from 'redux-thunk'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport {\n  residentListReducer,\n  residentDetailsReducer,\n  residentCreateReducer,\n  residentDeleteReducer,\n  residentUpdateReducer,\n} from './reducers/residentReducers'\nimport {\n  blotterListReducer,\n  blotterDetailsReducer,\n  blotterCreateReducer,\n  blotterDeleteReducer,\n  blotterUpdateReducer,\n} from './reducers/blotterReducers'\nimport {\n  imageDetailsReducer,\n  imageListReducer,\n  imageUpdateReducer,\n} from './reducers/imageReducers'\nimport { userLoginReducer } from './reducers/userReducers'\n\nconst reducer = combineReducers({\n  residentList: residentListReducer,\n  residentDetails: residentDetailsReducer,\n  userLogin: userLoginReducer,\n  residentCreate: residentCreateReducer,\n  residentDelete: residentDeleteReducer,\n  residentUpdate: residentUpdateReducer,\n  imageList: imageListReducer,\n  imageDetails: imageDetailsReducer,\n  imageUpdate: imageUpdateReducer,\n  blotterList: blotterListReducer,\n  blotterDetails: blotterDetailsReducer,\n  blotterCreate: blotterCreateReducer,\n  blotterDelete: blotterDeleteReducer,\n  blotterUpdate: blotterUpdateReducer,\n})\n\nconst userInfoFromStorage = localStorage.getItem('userInfo')\n  ? JSON.parse(localStorage.getItem('userInfo'))\n  : null\n\nconst initialState = {\n  userLogin: { userInfo: userInfoFromStorage },\n}\n\nconst middleware = [thunk]\n\nconst store = createStore(\n  reducer,\n  initialState,\n  composeWithDevTools(applyMiddleware(...middleware))\n)\nexport default store\n"]},"metadata":{},"sourceType":"module"}