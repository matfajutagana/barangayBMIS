{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Mat\\\\Desktop\\\\BarangayBMIS\\\\frontend\\\\src\\\\screens\\\\BlotterEditScreen.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Form, Button, Col } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Message from '../components/Message';\nimport Loader from '../components/Loader';\nimport FormContainerResident from '../components/FormContainerResident';\nimport { listBlotterDetails, updateBlotter } from '../actions/blotterActions';\nimport { BLOTTER_UPDATE_RESET } from '../constants/blotterConstants';\n\nconst BlotterEditScreen = ({\n  match,\n  history\n}) => {\n  _s();\n\n  const blotterId = match.params.id;\n  const [complainant, setComplainant] = useState('');\n  const [complainee, setComplainee] = useState('');\n  const [information, setInformation] = useState('');\n  const [isResolve, setIsResolve] = useState('');\n  const dispatch = useDispatch();\n  const blotterDetails = useSelector(state => state.blotterDetails);\n  const {\n    loading,\n    error,\n    blotter\n  } = blotterDetails;\n  const blotterUpdate = useSelector(state => state.blotterUpdate);\n  const {\n    loading: loadingUpdate,\n    error: errorUpdate,\n    success: successUpdate\n  } = blotterUpdate;\n  useEffect(() => {\n    if (successUpdate) {\n      dispatch({\n        type: BLOTTER_UPDATE_RESET\n      });\n      history.push('/blotter');\n    } else {\n      if (blotter._id !== blotterId) {\n        dispatch(listBlotterDetails(blotterId));\n      } else {\n        setComplainant(blotter.complainant);\n        setComplainee(blotter.complainee);\n        setInformation(blotter.information);\n        setIsResolve(blotter.isResolve);\n      }\n    }\n  }, [dispatch, history, blotterId, blotter, successUpdate]);\n\n  const displayEmpty = editDisplay => {\n    if (editDisplay === 'sample') {\n      editDisplay = '';\n    }\n\n    return editDisplay;\n  };\n\n  const submitHandler = e => {\n    e.preventDefault();\n    dispatch(updateBlotter({\n      _id: blotterId,\n      complainant,\n      complainee,\n      information,\n      isResolve\n    }));\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(FormContainerResident, {\n      children: [blotter.complainant === 'sample' ? /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Add Blotter\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"View/Edit Blotter\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this), loadingUpdate && /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 27\n      }, this), errorUpdate && /*#__PURE__*/_jsxDEV(Message, {\n        variant: \"danger\",\n        children: errorUpdate\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 25\n      }, this), loading ? /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }, this) : error ? /*#__PURE__*/_jsxDEV(Message, {\n        variant: \"danger\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(Form, {\n        onSubmit: submitHandler,\n        children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n          as: Col,\n          controlId: \"complainant\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Complainant Name: (Nag Reklamo)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"text\",\n            placeholder: \"Enter Complainant Name\",\n            value: displayEmpty(complainant),\n            onChange: e => setComplainant(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          as: Col,\n          controlId: \"complainee\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Complainee Name: (Inereklamo)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"text\",\n            placeholder: \"Enter Complainee Name\",\n            value: displayEmpty(complainee),\n            onChange: e => setComplainee(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          as: Col,\n          controlId: \"information\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Information\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            as: \"textarea\",\n            rows: 5,\n            type: \"text\",\n            placeholder: \"Enter Information\",\n            value: displayEmpty(information),\n            onChange: e => setInformation(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          as: Col,\n          controlId: \"isResolve\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Status\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            as: \"select\",\n            defaultValue: \"Choose...\",\n            value: displayEmpty(isResolve),\n            onChange: e => setIsResolve(e.target.value),\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              children: \" Unresolve\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 118,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              children: \"Resolve\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 119,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"primary\",\n          type: \"submit\",\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(BlotterEditScreen, \"v2A3I8kjjZVn3/936kAjBgjAoTM=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = BlotterEditScreen;\nexport default BlotterEditScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"BlotterEditScreen\");","map":{"version":3,"sources":["C:/Users/Mat/Desktop/BarangayBMIS/frontend/src/screens/BlotterEditScreen.js"],"names":["React","useState","useEffect","Form","Button","Col","useDispatch","useSelector","Message","Loader","FormContainerResident","listBlotterDetails","updateBlotter","BLOTTER_UPDATE_RESET","BlotterEditScreen","match","history","blotterId","params","id","complainant","setComplainant","complainee","setComplainee","information","setInformation","isResolve","setIsResolve","dispatch","blotterDetails","state","loading","error","blotter","blotterUpdate","loadingUpdate","errorUpdate","success","successUpdate","type","push","_id","displayEmpty","editDisplay","submitHandler","e","preventDefault","target","value"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,IAAT,EAAeC,MAAf,EAAuBC,GAAvB,QAAkC,iBAAlC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,qBAAP,MAAkC,qCAAlC;AACA,SAASC,kBAAT,EAA6BC,aAA7B,QAAkD,2BAAlD;AACA,SAASC,oBAAT,QAAqC,+BAArC;;AAEA,MAAMC,iBAAiB,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAAD,KAAwB;AAAA;;AAChD,QAAMC,SAAS,GAAGF,KAAK,CAACG,MAAN,CAAaC,EAA/B;AACA,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCpB,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACqB,UAAD,EAAaC,aAAb,IAA8BtB,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACuB,WAAD,EAAcC,cAAd,IAAgCxB,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACyB,SAAD,EAAYC,YAAZ,IAA4B1B,QAAQ,CAAC,EAAD,CAA1C;AAEA,QAAM2B,QAAQ,GAAGtB,WAAW,EAA5B;AAEA,QAAMuB,cAAc,GAAGtB,WAAW,CAAEuB,KAAD,IAAWA,KAAK,CAACD,cAAlB,CAAlC;AACA,QAAM;AAAEE,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA8BJ,cAApC;AAEA,QAAMK,aAAa,GAAG3B,WAAW,CAAEuB,KAAD,IAAWA,KAAK,CAACI,aAAlB,CAAjC;AACA,QAAM;AACJH,IAAAA,OAAO,EAAEI,aADL;AAEJH,IAAAA,KAAK,EAAEI,WAFH;AAGJC,IAAAA,OAAO,EAAEC;AAHL,MAIFJ,aAJJ;AAMAhC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIoC,aAAJ,EAAmB;AACjBV,MAAAA,QAAQ,CAAC;AAAEW,QAAAA,IAAI,EAAE1B;AAAR,OAAD,CAAR;AACAG,MAAAA,OAAO,CAACwB,IAAR,CAAa,UAAb;AACD,KAHD,MAGO;AACL,UAAIP,OAAO,CAACQ,GAAR,KAAgBxB,SAApB,EAA+B;AAC7BW,QAAAA,QAAQ,CAACjB,kBAAkB,CAACM,SAAD,CAAnB,CAAR;AACD,OAFD,MAEO;AACLI,QAAAA,cAAc,CAACY,OAAO,CAACb,WAAT,CAAd;AACAG,QAAAA,aAAa,CAACU,OAAO,CAACX,UAAT,CAAb;AACAG,QAAAA,cAAc,CAACQ,OAAO,CAACT,WAAT,CAAd;AACAG,QAAAA,YAAY,CAACM,OAAO,CAACP,SAAT,CAAZ;AACD;AACF;AACF,GAdQ,EAcN,CAACE,QAAD,EAAWZ,OAAX,EAAoBC,SAApB,EAA+BgB,OAA/B,EAAwCK,aAAxC,CAdM,CAAT;;AAgBA,QAAMI,YAAY,GAAIC,WAAD,IAAiB;AACpC,QAAIA,WAAW,KAAK,QAApB,EAA8B;AAC5BA,MAAAA,WAAW,GAAG,EAAd;AACD;;AACD,WAAOA,WAAP;AACD,GALD;;AAOA,QAAMC,aAAa,GAAIC,CAAD,IAAO;AAC3BA,IAAAA,CAAC,CAACC,cAAF;AACAlB,IAAAA,QAAQ,CACNhB,aAAa,CAAC;AACZ6B,MAAAA,GAAG,EAAExB,SADO;AAEZG,MAAAA,WAFY;AAGZE,MAAAA,UAHY;AAIZE,MAAAA,WAJY;AAKZE,MAAAA;AALY,KAAD,CADP,CAAR;AASD,GAXD;;AAaA,sBACE;AAAA,2BACE,QAAC,qBAAD;AAAA,iBACGO,OAAO,CAACb,WAAR,KAAwB,QAAxB,gBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADD,gBAGC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJJ,EAMGe,aAAa,iBAAI,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,cANpB,EAOGC,WAAW,iBAAI,QAAC,OAAD;AAAS,QAAA,OAAO,EAAC,QAAjB;AAAA,kBAA2BA;AAA3B;AAAA;AAAA;AAAA;AAAA,cAPlB,EAQGL,OAAO,gBACN,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,cADM,GAEJC,KAAK,gBACP,QAAC,OAAD;AAAS,QAAA,OAAO,EAAC,QAAjB;AAAA,kBAA2BA;AAA3B;AAAA;AAAA;AAAA;AAAA,cADO,gBAGP,QAAC,IAAD;AAAM,QAAA,QAAQ,EAAEY,aAAhB;AAAA,gCACE,QAAC,IAAD,CAAM,KAAN;AAAY,UAAA,EAAE,EAAEvC,GAAhB;AAAqB,UAAA,SAAS,EAAC,aAA/B;AAAA,kCACE,QAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE,QAAC,IAAD,CAAM,OAAN;AACE,YAAA,IAAI,EAAC,MADP;AAEE,YAAA,WAAW,EAAC,wBAFd;AAGE,YAAA,KAAK,EAAEqC,YAAY,CAACtB,WAAD,CAHrB;AAIE,YAAA,QAAQ,EAAGyB,CAAD,IAAOxB,cAAc,CAACwB,CAAC,CAACE,MAAF,CAASC,KAAV;AAJjC;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAUE,QAAC,IAAD,CAAM,KAAN;AAAY,UAAA,EAAE,EAAE3C,GAAhB;AAAqB,UAAA,SAAS,EAAC,YAA/B;AAAA,kCACE,QAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE,QAAC,IAAD,CAAM,OAAN;AACE,YAAA,IAAI,EAAC,MADP;AAEE,YAAA,WAAW,EAAC,uBAFd;AAGE,YAAA,KAAK,EAAEqC,YAAY,CAACpB,UAAD,CAHrB;AAIE,YAAA,QAAQ,EAAGuB,CAAD,IAAOtB,aAAa,CAACsB,CAAC,CAACE,MAAF,CAASC,KAAV;AAJhC;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,gBAVF,eAmBE,QAAC,IAAD,CAAM,KAAN;AAAY,UAAA,EAAE,EAAE3C,GAAhB;AAAqB,UAAA,SAAS,EAAC,aAA/B;AAAA,kCACE,QAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE,QAAC,IAAD,CAAM,OAAN;AACE,YAAA,EAAE,EAAC,UADL;AAEE,YAAA,IAAI,EAAE,CAFR;AAGE,YAAA,IAAI,EAAC,MAHP;AAIE,YAAA,WAAW,EAAC,mBAJd;AAKE,YAAA,KAAK,EAAEqC,YAAY,CAAClB,WAAD,CALrB;AAME,YAAA,QAAQ,EAAGqB,CAAD,IAAOpB,cAAc,CAACoB,CAAC,CAACE,MAAF,CAASC,KAAV;AANjC;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,gBAnBF,eA8BE,QAAC,IAAD,CAAM,KAAN;AAAY,UAAA,EAAE,EAAE3C,GAAhB;AAAqB,UAAA,SAAS,EAAC,WAA/B;AAAA,kCACE,QAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE,QAAC,IAAD,CAAM,OAAN;AACE,YAAA,EAAE,EAAC,QADL;AAEE,YAAA,YAAY,EAAC,WAFf;AAGE,YAAA,KAAK,EAAEqC,YAAY,CAAChB,SAAD,CAHrB;AAIE,YAAA,QAAQ,EAAGmB,CAAD,IAAOlB,YAAY,CAACkB,CAAC,CAACE,MAAF,CAASC,KAAV,CAJ/B;AAAA,oCAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBANF,eAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAPF;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,gBA9BF,eA2CE,QAAC,MAAD;AAAQ,UAAA,OAAO,EAAC,SAAhB;AAA0B,UAAA,IAAI,EAAC,QAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBA3CF;AAAA;AAAA;AAAA;AAAA;AAAA,cAbJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AAkED,CAzHD;;GAAMlC,iB;UAOaR,W,EAEMC,W,EAGDA,W;;;KAZlBO,iB;AA2HN,eAAeA,iBAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { Form, Button, Col } from 'react-bootstrap'\nimport { useDispatch, useSelector } from 'react-redux'\nimport Message from '../components/Message'\nimport Loader from '../components/Loader'\nimport FormContainerResident from '../components/FormContainerResident'\nimport { listBlotterDetails, updateBlotter } from '../actions/blotterActions'\nimport { BLOTTER_UPDATE_RESET } from '../constants/blotterConstants'\n\nconst BlotterEditScreen = ({ match, history }) => {\n  const blotterId = match.params.id\n  const [complainant, setComplainant] = useState('')\n  const [complainee, setComplainee] = useState('')\n  const [information, setInformation] = useState('')\n  const [isResolve, setIsResolve] = useState('')\n\n  const dispatch = useDispatch()\n\n  const blotterDetails = useSelector((state) => state.blotterDetails)\n  const { loading, error, blotter } = blotterDetails\n\n  const blotterUpdate = useSelector((state) => state.blotterUpdate)\n  const {\n    loading: loadingUpdate,\n    error: errorUpdate,\n    success: successUpdate,\n  } = blotterUpdate\n\n  useEffect(() => {\n    if (successUpdate) {\n      dispatch({ type: BLOTTER_UPDATE_RESET })\n      history.push('/blotter')\n    } else {\n      if (blotter._id !== blotterId) {\n        dispatch(listBlotterDetails(blotterId))\n      } else {\n        setComplainant(blotter.complainant)\n        setComplainee(blotter.complainee)\n        setInformation(blotter.information)\n        setIsResolve(blotter.isResolve)\n      }\n    }\n  }, [dispatch, history, blotterId, blotter, successUpdate])\n\n  const displayEmpty = (editDisplay) => {\n    if (editDisplay === 'sample') {\n      editDisplay = ''\n    }\n    return editDisplay\n  }\n\n  const submitHandler = (e) => {\n    e.preventDefault()\n    dispatch(\n      updateBlotter({\n        _id: blotterId,\n        complainant,\n        complainee,\n        information,\n        isResolve,\n      })\n    )\n  }\n\n  return (\n    <>\n      <FormContainerResident>\n        {blotter.complainant === 'sample' ? (\n          <h1>Add Blotter</h1>\n        ) : (\n          <h1>View/Edit Blotter</h1>\n        )}\n        {loadingUpdate && <Loader />}\n        {errorUpdate && <Message variant=\"danger\">{errorUpdate}</Message>}\n        {loading ? (\n          <Loader />\n        ) : error ? (\n          <Message variant=\"danger\">{error}</Message>\n        ) : (\n          <Form onSubmit={submitHandler}>\n            <Form.Group as={Col} controlId=\"complainant\">\n              <Form.Label>Complainant Name: (Nag Reklamo)</Form.Label>\n              <Form.Control\n                type=\"text\"\n                placeholder=\"Enter Complainant Name\"\n                value={displayEmpty(complainant)}\n                onChange={(e) => setComplainant(e.target.value)}\n              />\n            </Form.Group>\n            <Form.Group as={Col} controlId=\"complainee\">\n              <Form.Label>Complainee Name: (Inereklamo)</Form.Label>\n              <Form.Control\n                type=\"text\"\n                placeholder=\"Enter Complainee Name\"\n                value={displayEmpty(complainee)}\n                onChange={(e) => setComplainee(e.target.value)}\n              />\n            </Form.Group>\n            <Form.Group as={Col} controlId=\"information\">\n              <Form.Label>Information</Form.Label>\n              <Form.Control\n                as=\"textarea\"\n                rows={5}\n                type=\"text\"\n                placeholder=\"Enter Information\"\n                value={displayEmpty(information)}\n                onChange={(e) => setInformation(e.target.value)}\n              />\n            </Form.Group>\n            <Form.Group as={Col} controlId=\"isResolve\">\n              <Form.Label>Status</Form.Label>\n              <Form.Control\n                as=\"select\"\n                defaultValue=\"Choose...\"\n                value={displayEmpty(isResolve)}\n                onChange={(e) => setIsResolve(e.target.value)}\n              >\n                <option> Unresolve</option>\n                <option>Resolve</option>\n              </Form.Control>\n            </Form.Group>\n\n            <Button variant=\"primary\" type=\"submit\">\n              Submit\n            </Button>\n          </Form>\n        )}\n      </FormContainerResident>\n    </>\n  )\n}\n\nexport default BlotterEditScreen\n"]},"metadata":{},"sourceType":"module"}