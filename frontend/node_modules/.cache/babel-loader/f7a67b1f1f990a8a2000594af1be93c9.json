{"ast":null,"code":"import axios from 'axios';\nimport { BLOTTER_LIST_REQUEST, BLOTTER_LIST_SUCCESS, BLOTTER_LIST_FAIL, BLOTTER_DETAILS_REQUEST, BLOTTER_DETAILS_SUCCESS, BLOTTER_DETAILS_FAIL, BLOTTER_DELETE_REQUEST, BLOTTER_DELETE_SUCCESS, BLOTTER_DELETE_FAIL, BLOTTER_CREATE_REQUEST, BLOTTER_CREATE_SUCCESS, BLOTTER_CREATE_FAIL, BLOTTER_UPDATE_REQUEST, BLOTTER_UPDATE_SUCCESS, BLOTTER_UPDATE_FAIL } from '../constants/blotterConstants';\nexport const listBlotters = () => async dispatch => {\n  try {\n    dispatch({\n      type: BLOTTER_LIST_REQUEST\n    });\n    const {\n      data\n    } = await axios.get('/api/blotters');\n    dispatch({\n      type: BLOTTER_LIST_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: BLOTTER_LIST_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const listBlotterDetails = id => async dispatch => {\n  try {\n    dispatch({\n      type: BLOTTER_DETAILS_REQUEST\n    });\n    const {\n      data\n    } = await axios.get(`/api/blotters/${id}`);\n    dispatch({\n      type: BLOTTER_DETAILS_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: BLOTTER_DETAILS_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const deleteBlotter = id => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: BLOTTER_DELETE_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    await axios.delete(`/api/blotters/${id}`, config);\n    dispatch({\n      type: BLOTTER_DELETE_SUCCESS\n    });\n  } catch (error) {\n    dispatch({\n      type: BLOTTER_DELETE_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const createBlotter = () => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: BLOTTER_CREATE_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.post(`/api/blotters`, {}, config);\n    dispatch({\n      type: BLOTTER_CREATE_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: BLOTTER_CREATE_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const updateBlotter = blotter => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: BLOTTER_UPDATE_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.put(`/api/blotters/${blotter._id}`, blotter, config);\n    dispatch({\n      type: BLOTTER_UPDATE_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: BLOTTER_UPDATE_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/Mat/Desktop/BarangayBMIS/frontend/src/actions/blotterActions.js"],"names":["axios","BLOTTER_LIST_REQUEST","BLOTTER_LIST_SUCCESS","BLOTTER_LIST_FAIL","BLOTTER_DETAILS_REQUEST","BLOTTER_DETAILS_SUCCESS","BLOTTER_DETAILS_FAIL","BLOTTER_DELETE_REQUEST","BLOTTER_DELETE_SUCCESS","BLOTTER_DELETE_FAIL","BLOTTER_CREATE_REQUEST","BLOTTER_CREATE_SUCCESS","BLOTTER_CREATE_FAIL","BLOTTER_UPDATE_REQUEST","BLOTTER_UPDATE_SUCCESS","BLOTTER_UPDATE_FAIL","listBlotters","dispatch","type","data","get","payload","error","response","message","listBlotterDetails","id","deleteBlotter","getState","userLogin","userInfo","config","headers","Authorization","token","delete","createBlotter","post","updateBlotter","blotter","put","_id"],"mappings":"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","sourcesContent":["import axios from 'axios'\nimport {\n  BLOTTER_LIST_REQUEST,\n  BLOTTER_LIST_SUCCESS,\n  BLOTTER_LIST_FAIL,\n  BLOTTER_DETAILS_REQUEST,\n  BLOTTER_DETAILS_SUCCESS,\n  BLOTTER_DETAILS_FAIL,\n  BLOTTER_DELETE_REQUEST,\n  BLOTTER_DELETE_SUCCESS,\n  BLOTTER_DELETE_FAIL,\n  BLOTTER_CREATE_REQUEST,\n  BLOTTER_CREATE_SUCCESS,\n  BLOTTER_CREATE_FAIL,\n  BLOTTER_UPDATE_REQUEST,\n  BLOTTER_UPDATE_SUCCESS,\n  BLOTTER_UPDATE_FAIL,\n} from '../constants/blotterConstants'\n\nexport const listBlotters = () => async (dispatch) => {\n  try {\n    dispatch({ type: BLOTTER_LIST_REQUEST })\n\n    const { data } = await axios.get('/api/blotters')\n\n    dispatch({\n      type: BLOTTER_LIST_SUCCESS,\n      payload: data,\n    })\n  } catch (error) {\n    dispatch({\n      type: BLOTTER_LIST_FAIL,\n      payload:\n        error.response && error.response.data.message\n          ? error.response.data.message\n          : error.message,\n    })\n  }\n}\n\nexport const listBlotterDetails = (id) => async (dispatch) => {\n  try {\n    dispatch({ type: BLOTTER_DETAILS_REQUEST })\n\n    const { data } = await axios.get(`/api/blotters/${id}`)\n\n    dispatch({\n      type: BLOTTER_DETAILS_SUCCESS,\n      payload: data,\n    })\n  } catch (error) {\n    dispatch({\n      type: BLOTTER_DETAILS_FAIL,\n      payload:\n        error.response && error.response.data.message\n          ? error.response.data.message\n          : error.message,\n    })\n  }\n}\n\nexport const deleteBlotter = (id) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: BLOTTER_DELETE_REQUEST,\n    })\n\n    const {\n      userLogin: { userInfo },\n    } = getState()\n\n    const config = {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`,\n      },\n    }\n\n    await axios.delete(`/api/blotters/${id}`, config)\n\n    dispatch({\n      type: BLOTTER_DELETE_SUCCESS,\n    })\n  } catch (error) {\n    dispatch({\n      type: BLOTTER_DELETE_FAIL,\n      payload:\n        error.response && error.response.data.message\n          ? error.response.data.message\n          : error.message,\n    })\n  }\n}\n\nexport const createBlotter = () => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: BLOTTER_CREATE_REQUEST,\n    })\n\n    const {\n      userLogin: { userInfo },\n    } = getState()\n\n    const config = {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`,\n      },\n    }\n\n    const { data } = await axios.post(`/api/blotters`, {}, config)\n\n    dispatch({\n      type: BLOTTER_CREATE_SUCCESS,\n      payload: data,\n    })\n  } catch (error) {\n    dispatch({\n      type: BLOTTER_CREATE_FAIL,\n      payload:\n        error.response && error.response.data.message\n          ? error.response.data.message\n          : error.message,\n    })\n  }\n}\nexport const updateBlotter = (blotter) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: BLOTTER_UPDATE_REQUEST,\n    })\n\n    const {\n      userLogin: { userInfo },\n    } = getState()\n\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${userInfo.token}`,\n      },\n    }\n\n    const { data } = await axios.put(\n      `/api/blotters/${blotter._id}`,\n      blotter,\n      config\n    )\n\n    dispatch({\n      type: BLOTTER_UPDATE_SUCCESS,\n      payload: data,\n    })\n  } catch (error) {\n    dispatch({\n      type: BLOTTER_UPDATE_FAIL,\n      payload:\n        error.response && error.response.data.message\n          ? error.response.data.message\n          : error.message,\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}