{"ast":null,"code":"import axios from 'axios';\nimport { IMAGE_LIST_REQUEST, IMAGE_LIST_SUCCESS, IMAGE_LIST_FAIL, IMAGE_DETAILS_REQUEST, IMAGE_DETAILS_SUCCESS, IMAGE_DETAILS_FAIL, IMAGE_UPDATE_REQUEST, IMAGE_UPDATE_SUCCESS, IMAGE_UPDATE_FAIL } from '../constants/imageConstants';\nexport const listImages = () => async dispatch => {\n  try {\n    dispatch({\n      type: IMAGE_LIST_REQUEST\n    });\n    const {\n      data\n    } = await axios.get('/api/images');\n    dispatch({\n      type: IMAGE_LIST_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: IMAGE_LIST_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const listImageDetails = id => async dispatch => {\n  try {\n    dispatch({\n      type: IMAGE_DETAILS_REQUEST\n    });\n    const {\n      data\n    } = await axios.get(`/api/images/${id}`);\n    dispatch({\n      type: IMAGE_DETAILS_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: IMAGE_DETAILS_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const updateImage = image => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: IMAGE_UPDATE_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.put(`/api/images/${image._id}`, image, config);\n    dispatch({\n      type: IMAGE_UPDATE_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: IMAGE_UPDATE_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/Mat/Desktop/BarangayBMIS/frontend/src/actions/imageActions.js"],"names":["axios","IMAGE_LIST_REQUEST","IMAGE_LIST_SUCCESS","IMAGE_LIST_FAIL","IMAGE_DETAILS_REQUEST","IMAGE_DETAILS_SUCCESS","IMAGE_DETAILS_FAIL","IMAGE_UPDATE_REQUEST","IMAGE_UPDATE_SUCCESS","IMAGE_UPDATE_FAIL","listImages","dispatch","type","data","get","payload","error","response","message","listImageDetails","id","updateImage","image","getState","userLogin","userInfo","config","headers","Authorization","token","put","_id"],"mappings":"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","sourcesContent":["import axios from 'axios'\nimport {\n  IMAGE_LIST_REQUEST,\n  IMAGE_LIST_SUCCESS,\n  IMAGE_LIST_FAIL,\n  IMAGE_DETAILS_REQUEST,\n  IMAGE_DETAILS_SUCCESS,\n  IMAGE_DETAILS_FAIL,\n  IMAGE_UPDATE_REQUEST,\n  IMAGE_UPDATE_SUCCESS,\n  IMAGE_UPDATE_FAIL,\n} from '../constants/imageConstants'\n\nexport const listImages = () => async (dispatch) => {\n  try {\n    dispatch({ type: IMAGE_LIST_REQUEST })\n\n    const { data } = await axios.get('/api/images')\n\n    dispatch({\n      type: IMAGE_LIST_SUCCESS,\n      payload: data,\n    })\n  } catch (error) {\n    dispatch({\n      type: IMAGE_LIST_FAIL,\n      payload:\n        error.response && error.response.data.message\n          ? error.response.data.message\n          : error.message,\n    })\n  }\n}\n\nexport const listImageDetails = (id) => async (dispatch) => {\n  try {\n    dispatch({ type: IMAGE_DETAILS_REQUEST })\n\n    const { data } = await axios.get(`/api/images/${id}`)\n\n    dispatch({\n      type: IMAGE_DETAILS_SUCCESS,\n      payload: data,\n    })\n  } catch (error) {\n    dispatch({\n      type: IMAGE_DETAILS_FAIL,\n      payload:\n        error.response && error.response.data.message\n          ? error.response.data.message\n          : error.message,\n    })\n  }\n}\n\nexport const updateImage = (image) => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: IMAGE_UPDATE_REQUEST,\n    })\n\n    const {\n      userLogin: { userInfo },\n    } = getState()\n\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${userInfo.token}`,\n      },\n    }\n\n    const { data } = await axios.put(`/api/images/${image._id}`, image, config)\n\n    dispatch({\n      type: IMAGE_UPDATE_SUCCESS,\n      payload: data,\n    })\n  } catch (error) {\n    dispatch({\n      type: IMAGE_UPDATE_FAIL,\n      payload:\n        error.response && error.response.data.message\n          ? error.response.data.message\n          : error.message,\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}